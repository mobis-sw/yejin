// 백준 2589 보물섬
// L:육지, W:바다
// 육지만 지날 수 있고 육지-육지 간 최단 거리가 가장 긴 두 곳에 보물 숨겨져있음
// 입력: 가로 세로 크기, L W 값
// L, W 최대값 50 일때, 보물 찾기까지 걸리는 시간은? (한칸당 1시간)

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int N, M;
int MAP[50][50];
int visit[50][50];
queue <pair<int, int>> q;
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };
int result = -1;
void bfs();

int main() {

	// 초기화
	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			char input;
			cin >> input;
			visit[i][j] = 0;
			if (input == 'W')
				MAP[i][j] = 0;
			else if (input == 'L')
				MAP[i][j] = 1;
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			if (MAP[i][j] == 1) {
				visit[i][j]++;
				q.push({ i,j });
				bfs();
			}
		}
	}

	cout << result;

	return 0;

}

void bfs() {
	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= M)
				continue;
			if (MAP[nx][ny] == 0)
				continue;
			if (visit[nx][ny])
				continue;
			visit[nx][ny] = visit[x][y] + 1;
			result = max(visit[ny][nx], result);
			q.push({nx, ny});
		}
	}
}
